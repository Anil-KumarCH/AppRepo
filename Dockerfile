# Dockerfile for Next.js Application

# ---- Stage 1: Build Stage ----
# Use an official Node.js image as a parent image.
# Alpine versions are lightweight. Choose a version compatible with your Next.js app.
FROM node:18-alpine AS builder

# Set the working directory in the container.
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock) first.
# This leverages Docker's caching. If these files haven't changed,
# Docker won't re-run npm install.
COPY package*.json ./

# Install dependencies.
# Consider removing --force if possible by fixing peer dependencies in your package.json.
# Using --force can hide underlying issues that might affect the build or runtime.
RUN npm install --force

# Copy the rest of your application's source code into the container.
# Ensure you have a .dockerignore file to exclude node_modules, .next, .git, etc., from the build context.
COPY . .

# Build the Next.js application for production.
# This step will also bundle your CSS (e.g., from styles/globals.css if imported in layout.tsx).
RUN npm run build

# ---- DEBUGGING STEPS: To verify contents of the builder stage ----
# These are helpful for diagnosing issues during the build.
RUN echo "---- Listing contents of /app in builder stage ----" && ls -la /app
RUN echo "---- Listing contents of /app/.next in builder stage ----" && ls -la /app/.next
RUN echo "---- Listing contents of /app/.next/standalone in builder stage (if it exists) ----" && \
    (ls -la /app/.next/standalone || echo "/app/.next/standalone NOT FOUND in builder. CHECK next.config.js for 'output: \"standalone\"'.")
RUN echo "---- Listing contents of /app/.next/standalone/.next/static in builder stage (if standalone exists) ----" && \
    (ls -la /app/.next/standalone/.next/static || echo "/app/.next/standalone/.next/static NOT FOUND in builder.")
RUN echo "---- Listing contents of /app/.next/standalone/public in builder stage (if standalone exists and packages public) ----" && \
    (ls -la /app/.next/standalone/public || echo "/app/.next/standalone/public NOT FOUND in builder. This is okay if server.js serves from a root public dir.")
RUN echo "---- Listing contents of /app/public in builder stage (original public folder) ----" && \
    (ls -la /app/public || echo "/app/public NOT FOUND in builder")
RUN echo "---- End of Debug Listings ----"
# ---- END DEBUGGING STEPS ----

# ---- Stage 2: Production Stage ----
# Use a lean Node.js Alpine image for the production environment.
FROM node:18-alpine AS runner

# Set the working directory.
WORKDIR /app

# Set environment to production for Next.js.
ENV NODE_ENV=production
# Set HOSTNAME for Next.js server to listen on all interfaces within Docker.
# Use key=value format for ENV.
ENV HOSTNAME=0.0.0.0
# Standard Next.js port.
EXPOSE 3000

# Create a non-root user and group for better security.
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy the standalone output from the builder stage.
# The `output: "standalone"` feature in next.config.js creates a self-contained
# directory in .next/standalone that includes server.js, minimal node_modules,
# and static assets (including CSS and JS chunks from .next/static, and public assets).
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./

# The standalone output should correctly package and serve assets from the public directory.
# An explicit copy of the original public folder is usually not needed and can cause issues
# if it conflicts with how the standalone server.js expects to find assets.
# If assets from `public` are missing, first verify the contents of `/app/.next/standalone/public`
# in the builder stage. If Next.js didn't package them there, then you might need to
# copy them from the builder's `/app/public` to `/app/public` in this runner stage,
# but this is less common for a properly configured standalone output.

# Switch to the non-root user.
USER nextjs

# The CMD should point to the server.js within the copied standalone directory.
# This server.js is generated by Next.js when output: 'standalone' is used.
CMD ["node", "server.js"]